@page "/"
@inject IJSRuntime JS

<div class="row">
    <select name="remote" id="remote" class="form-select col mx-1">
        <option value="LLAMA" selected>LLAMA</option>
    </select>
    <select name="local" id="local" class="form-select col mx-1">
        <option value="BERT-local">BERT-local</option>
    </select>
</div>

<div class="row">
    <p id="remoteH" class="col bg-dark text-white mx-1">
        Lorem ipsum dolor sit amet consectetur adipisicing elit. Corrupti placeat enim odio perspiciatis atque provident
        illo est qui iure eius?
    </p>

    <p id="localH" class="col bg-dark text-white mx-1">
        @if (response != null)
        {
            @response
        }
    </p>
</div>

<div class="row">
    <p id="note" class="col bg-dark text-white mx-1" @onclick="Compare">
        What do you think about coding?
    </p>
</div>
<div class="row justify-content-end">
    <button class="btn btn-dark btn-sm col-auto">Save history</button>
</div>

<script>
    function getText() {
        return document.getElementById("note").innerText;
    }
</script>

@code {
    public HttpClient httpClient = new HttpClient();
    public string? response;

    public async Task Compare()
    {
        var text = await JS.InvokeAsync<string>("getText");
        var data = new { query = text };

        var content = JsonContent.Create(data);
        var response = await httpClient.PostAsync("http://127.0.0.1:8000/compare", content);

        if (response.IsSuccessStatusCode)
        {
            var jsonResponse = await response.Content.ReadAsStringAsync();
            this.response = jsonResponse;
        }
        else
        {
            // Handle error status code
            Console.WriteLine($"Failed to post data. Status code: {response.StatusCode}");
        }
    }
}